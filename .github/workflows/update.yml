name: Update repo.json with latest Delta iOS info

on:
  schedule:
    - cron: '0 * * * *'  # runs every hour
  workflow_dispatch:     # manual trigger allowed

jobs:
  update_repo_json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          persist-credentials: false  # Disable default token persistence

      - name: Setup git user and auth
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/ismandd/DeltaRepo.git

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Puppeteer
        run: npm install puppeteer

      - name: Fetch latest JSON data with Puppeteer
        run: |
          node -e "
          const puppeteer = require('puppeteer');
          (async () => {
            const browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] });
            const page = await browser.newPage();
            await page.goto('https://delta.webfiles.pro/get_files.php', { waitUntil: 'networkidle0' });
            const content = await page.evaluate(() => document.body.innerText);
            require('fs').writeFileSync('repo.json', content);
            await browser.close();
          })();
          "

      - name: Check if repo.json changed
        id: check_changes
        run: |
          git add repo.json
          if git diff --cached --quiet; then
            echo "No changes to commit"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git add repo.json
          git commit -m "Update repo.json with latest Delta iOS info"
          git pull --rebase origin main || (git rebase --abort && exit 1)
          git push origin HEAD:main
